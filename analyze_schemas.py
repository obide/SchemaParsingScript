#! /usr/bin/env python

#TODO
#Make display_schema modular, only parse one table at a time
#Create function to loop through tables and feed to display_schema function
#
#NOTES
#Output for column name has been disabled and can be re-enabled at anytime 
#
# June 15, 2016 by Anahit Sarao & Nadim Sarras
#
#
import sys, incorta, json as json, re as regex, xml.etree.ElementTree as xml; 

DEBUG = False #Enable or disbale debug print statements
SEPERATOR = "------------------------------------------------------------------------------------------------------"

"""
Function takes table input and parses table for pattern matching XML
	args:
		session(string): The session to incorta
		schema(xml.etree.ElementTree): The schema object
	returns: 
		Nothing
	prints:
		Prints out the table with Table Name, Type, Incremental, Query, Key
"""
def display_schema(session, schema):
    r = incorta.get(session, "/service/schema/getSchema", {"schemaId": schema["id"]})
    schema_xml = xml.fromstring(r.content)
    table_has_key = which_table_has_key(schema_xml)
    for table in schema_xml.findall(".//datasets/*"):
        inc = "incremental" in table.attrib and "true" == str(table.attrib["incremental"]).lower()
        query_xml = table.find("queryUpdate")
        correct_query = Q_REGEX.match(xml.tostring(query_xml)) if not query_xml is None else False
        table_name = table.attrib['table']
        print ("{:<50} {:<10} {:<15} {:<20} {:<30}" ).format(table_name, table.tag, 
            "Yes" if inc else "No", "-" if not inc else "Yes" if correct_query else "No",
            "Yes" if table_has_key[table_name.split('.')[1]] else "No")
        """
This function generates a dictionary (map with key pair values) containing
the table name and whether it contains a key or not.
    Args:
        schema_xml(Element object from xml.etree.ElementTree) 
            (usually generated by r = incorta.get(session, "/service/schema/getSchema", 
            {"schemaId": schema["id"]}))
            schema_xml = xml.fromstring(r.content)
    returns: dictionary with tableName : hasKey (True/False)
"""
def which_table_has_key(schema_xml):
    table_has_key = {}
    try:
    	tables = schema_xml.find('schemaData').find('schema').find('tables')
    	tables = tables.findall('table')
    except Exception, e:
    	return table_has_key
    current_table_has_key = False
    for table in tables:
        current_table_has_key = False
        for column in table.iter():
            if column.get('function') == 'key':
                current_table_has_key=True
        table_has_key[table.get('name')] = current_table_has_key
    return table_has_key
"""
Allows pattern matching for schema, print out header statement for print output
	args:
		session(string): The session to incorta
		schema_list(xml.etree.ElementTree): The schema object
		schema_pattern(): Pattern of XML parsed schema
	returns: 
		Nothing
	prints:
		Has top level header print statement
"""
def list_schemas(session, schema_list, schema_pattern):
	schema_found = False
	#loops through schema list and displays output
	for schema in schema_list:
		schema_name = schema["name"]
		if schema_pattern.match(schema_name) :
			print " Schema ", schema_name
			print (SEPERATOR)
			print ("{:<50} {:<10} {:<15} {:<20} {:<30}" ).format("Table name", "Type", \
				"Incremental", "Query has (?)", "Key?")
			print (SEPERATOR)
			schema_found = True
			display_schema(session, schema)
			print (SEPERATOR+"\n")
	if not schema_found:
		print ("WARNNING: Could not find schemas matching your criteria, please "
		"try '%' if you want to include all schemas.")

if len(sys.argv) < 5 :
	print ("Invalid arguments are: server tenant user pass schema_pattern")
	print ("example:")
	print ("\t http://localhost:8080/incorta demo super@incorta.com password EBS_%")

else :
	args = sys.argv[1:]
	server = args[0] #Arugument for Server 
	tenant = args[1] #Arugument for Tenant
	user = args[2] #Arugument for User
	password = args[3] #Arugument for Password 
	schema_pattern = regex.compile(str(args[4]).replace("%", ".*"))
	Q_REGEX = regex.compile("[^\\?]*\\?[^\\?]*")
	
	session = incorta.login(server, tenant, user, password)
	
	r = incorta.get(session, "/service/schema/getSchemas")
	try :
		list_schemas(session, json.loads(r.content)['schemas'], schema_pattern)
	finally :
		incorta.logout(session)